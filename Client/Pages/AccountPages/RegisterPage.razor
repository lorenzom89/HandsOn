@page "/identity/account/register"
@using Client.Pages.OtherPages
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService

<div class="container">
    <div class="row">
        <div class="col-lg-4"/>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                 <DataAnnotationsValidator />
                 <div class="card bg-dark" style="opacity:0.85; margin-top:30%; border-radius:10px; color:white; font-weight:bold;">
                     <div class="card-header text-center fs-5 mb-2">Cadastrar uma conta</div>
                     <div class="container">
                         <div class="row">
                             <div class="col-lg-4 col-md-4 col-sm-4" />
                             <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                 <a href="/"><img style="border-radius:20px" src="../images/companylogos/horizon.jpg" height="50" width="50" /></a>
                             </div>
                             <div class="col-lg-4 col-md-4 col-sm-4" />
                         </div>
                     </div>
                     <div class="card-body">
                         <div class="form-group mt-3">
                             <label class="form-label">Nome Completo</label>
                             <InputText @bind-Value=User.Fullname class="form-control"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Email</label>
                             <InputText @bind-Value=User.Email class="form-control"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Senha</label>
                             <input required type="password" @bind=User.Password class="form-control"></input>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Confirmar Senha</label>
                             <input required type="password" @bind=User.ConfirmPassword class="form-control"></input>
                         </div>
                         <div class="form-group mt-3">
                             @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Registrar</button>
                            }
                         </div>
                         <div class="card-footer">
                             <span class=" text-center">
                                 Já tem uma conta? |
                                 <a class="btn-link" href="identity/account/login">Login</a>
                             </span>
                             <ValidationSummary />
                         </div>
                     </div>
                 </div>
             </EditForm>
         </div>
        <div class="col-lg-4"/>
     </div>
 </div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAutentication();
    }

    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Success");
            User = new();
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
        
    }
    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }


    private async Task CheckUserAutentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
        {
            NavManager.NavigateTo("/home/buscar-voos");
        }
    }

}