<SfDialog Width="450px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">

    <DialogEvents OnOpen="OpenDialog"></DialogEvents>

    <DialogTemplates>
        <Header>Comprar Passagem</Header>
        <Content>
            <EditForm Model="Ticket" OnSubmit="Save">
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">

                            <label class="form-label">CPF</label>
                            <InputText @bind-Value="Passenger.CPF" class="form-control" @onfocusout=@(() => CheckExistingPassenger()) />

                            <label class="form-label">Nome completo</label>
                            <InputText @bind-Value="Passenger.Name" class="form-control" />

                            <label class="form-label">Data de nascimento</label>
                            <SfDatePicker @bind-Value="Passenger.DateOfBirth" Placeholder="Select date" class="form-control"></SfDatePicker>

                            <label class="form-label">Email</label>
                            <InputText @bind-Value="Passenger.Email" class="form-control" />


                            <label class="form-label">Assento selecionado</label>
                            <InputText @bind-Value="Ticket.Seat" class="form-control" @onfocusout=@(() => CheckSeat()) />
                             
                            <div>
                                <label class="form-label">Deseja despachar Bagagem?</label>
                                <InputCheckbox @bind-Value="Ticket.Baggage" @onchange="()=>GetPrice()"></InputCheckbox>
                            </div>
                            <label class="form-label">Classe do Vôo</label>
                            <SfDropDownList TValue="int" TItem="FlightClass" Placeholder="Selecione a classe do vôo" DataSource="FlightClasses">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="FlightClass" ValueChange="OnFlightClassChange"></DropDownListEvents>
                            </SfDropDownList>

                        </div>
                        <label class="form-label">Valor Total:</label>
                        <InputNumber @bind-Value="Ticket.TotalPrice" class="form-control" step="0.01" disabled  />
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>

    <DialogButtons>
        <DialogButton Content="Save" Type="Syncfusion.Blazor.Popups.ButtonType.Submit" IsPrimary="true" OnClick="Save" />
    </DialogButtons>

</SfDialog>

@code {
    [Parameter] public Flight? SelectedFlight { get; set; } = new();
    [Parameter] public List<Ticket> TicketsList { get; set; } = new();
    [Parameter] public List<FlightClass> FlightClassesList { get; set; } = new();

    [Parameter] public EventCallback<Passenger> HandleSavePassengerOperationEvent { get; set; }
    [Parameter] public EventCallback<Ticket> HandleSaveTicketOperationEvent { get; set; }


    public Ticket Ticket { get; set; } = new();
    private List<FlightClass> FlightClasses { get; set; } = new();
    public List<Passenger> PassengersList { get; set; } = new();
    private Flight Flight { get; set; } = new();
    private Passenger Passenger { get; set; } = new();


    private bool IsVisible { get; set; } = false;

    public void OpenDialog()
    {
        IsVisible = true;
        StateHasChanged();
    }

    protected async override void OnParametersSet()
    {
        base.OnParametersSet();
        Flight = SelectedFlight;
        FlightClasses = FlightClassesList.FindAll(f => f.FlightId == Flight?.Id);
        await GetPassenger();

        allState.Action += StateHasChanged;
    }

    private async Task GetPassenger()
    {
        PassengersList = await passengerService.GetAll(Constants.PassengerBaseUrl);
    }

    private void CheckExistingPassenger()
    {
        if (PassengersList is not null)
        {
            var passenger = PassengersList.Find(p => p.CPF == Passenger.CPF);
            if (passenger is not null)
            {
                Passenger = passenger;
                StateHasChanged();
            }
        }
    }

    private bool CheckExistingTicket()
    {
        if (TicketsList is not null)
        {
            var ticket = TicketsList.Find(t => t.SearchCode == Ticket.SearchCode);
            if (ticket is not null)
            {
                return true;
            }
            else return false;
        }
        else return false;
    }

    private async void CheckSeat()
    {
        if (TicketsList is not null)
        {
            var ticket = TicketsList.Find(t => t.Seat == Ticket.Seat);
            if (ticket is not null)
            {
                await DialogService.AlertAsync("O Assento selecionado não está disponivel. Por favor, selecione outro", "Atenção!");
                Ticket.Seat = string.Empty;
                StateHasChanged();
            }
        }
    }

    private async void Save()
    {
        if (string.IsNullOrEmpty(Passenger.CPF))
            await DialogService.AlertAsync("O CPF do passageiro deve ser preenchido", "Atenção!");

        else if (string.IsNullOrEmpty(Passenger.Name))
            await DialogService.AlertAsync("O Nome do passageiro deve ser preenchido", "Atenção!");

        else if (string.IsNullOrEmpty(Passenger.Email))
            await DialogService.AlertAsync("O Email do passageiro deve ser preenchido", "Atenção!");

        else if (string.IsNullOrEmpty(Ticket.Seat))
            await DialogService.AlertAsync("O Assento deve ser preenchido", "Atenção!");

        else
        {

            Ticket.SearchCode = Constants.GenerateRandomString(10);
            if (CheckExistingTicket())
                while(CheckExistingTicket())
                {
                    Ticket.SearchCode = Constants.GenerateRandomString(10);   
                }
            Ticket.FlightId = SelectedFlight.Id;

            var savePassenger = PassengersList.Find(p => p.Id == Passenger.Id);
            if (savePassenger is null){
                await HandleSavePassengerOperationEvent.InvokeAsync(Passenger);
                await GetPassenger();
                CheckExistingPassenger();
            }

            Ticket.PassengerId = Passenger.Id;
            await HandleSaveTicketOperationEvent.InvokeAsync(Ticket);
            if (Ticket.Baggage)
            {
                TicketsList = await ticketService.GetAll(Constants.TicketBaseUrl);
                var item = TicketsList.Find(t => t.SearchCode == Ticket.SearchCode);
                if(item is not null)
                {
                    Ticket = item; 
                    Baggage baggage = new() { SearchCode = Constants.GenerateRandomString(10), TicketId = Ticket.Id };
                    await baggageService.Insert(baggage, Constants.BaggageBaseUrl);
                }
            }

            ClosePassengerDialog();
        }

    }
    public void ClosePassengerDialog()
    {
        IsVisible = false;
        FlightClasses = [];
        Passenger = new();
        Ticket = new();
        StateHasChanged();
    }

    public void GetPrice()
    {
        if (FlightClasses is not null)
        {
            var flightClass = FlightClasses.Find(f => f.Id == Ticket.FlightClassId);
            Ticket.TotalPrice = Ticket.Baggage ? Math.Round((flightClass!.SeatPrice * 1.1), 2) : Math.Round(flightClass!.SeatPrice, 2);
        }
        else 
            Ticket.TotalPrice = 0.00;
    }

    public async void OnFlightClassChange(ChangeEventArgs<int, FlightClass> args)
    {
        Ticket.FlightClassId = args.Value;
        if (CalculateRemainingSeats(FlightClasses.Find(c => c.Id == args.Value)!) <= 0){
            await DialogService.AlertAsync("A classe selecionada não possui mais assentos disponíveis. Por favor, selecione outra", "Atenção!");
            return;
        }
        Ticket.FlightClassId = args.Value;
        GetPrice();
    }

    public int CalculateRemainingSeats(FlightClass flightClass)
    {
        var ticketList = TicketsList.FindAll(t => t.FlightId == Flight.Id && t.FlightClassId == flightClass.Id);
        int remainingSeats = 0;
        remainingSeats += flightClass.SeatQuantity;
        remainingSeats -= ticketList.Count;

        return remainingSeats;
    }
}
