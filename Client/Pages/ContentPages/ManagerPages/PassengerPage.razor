@implements IDisposable

@if (allState.ShowPassenger)
{
    <div class="container mt-5 ">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <span class="nav-link bi bi-arrow-left-square-fill text-danger" @onclick="GoBack"> Voltar</span>
                        <h4 class="float-start">Informações do Vôo</h4>
                    </div>
                    <div class="card-body">
                        <p><strong>Código do Voo:</strong> @Flight?.SearchCode</p>
                        <p><strong>Origem:</strong> @($"{Flight?.OriginAirport?.CodIATA} - {Flight?.OriginAirport?.City?.Name}")</p>
                        <p><strong>Destino:</strong> @($"{Flight?.DestinyAirport?.CodIATA} - {Flight?.DestinyAirport?.City?.Name}")</p>

                        <p><strong>Horário do Voo:</strong> @SelectedFlight?.FlightTime.ToString("dd/MM/yyyy HH:mm")</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Passageiros do Vôo</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog"><i class="bi bi-plus-circle-dotted"></i>Adicionar Passageiro</button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Nome</th>
                                        <th scope="col">Assento</th>
                                        <th scope="col">Classe</th>
                                        <th scope="col">Possui Bagagem?</th>
                                        <th scope="col">Valor Total</th>
                                        <th scope="col">Opções</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Tickets is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Tickets)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <th>@item.Passenger?.Name</th>
                                                <th>@item.Seat</th>
                                                <th>@item.FlightClass?.Name</th>
                                                <th>@(@item.Baggage ? "Sim" : "Não")</th>
                                                <th>@string.Format("{0:C}", @item.TotalPrice)</th>
                                                <th>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </th>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6"><div class="alert alert-info text-center">Nenhuma classe de voo cadastrada ainda</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<PassengerDialog @ref="passengerDialog"
                 HandleSaveTicketOperationEvent="HandleSaveTicketOperationEvent"
                 HandleSavePassengerOperationEvent= "HandleSavePassengerOperationEvent"
                   SelectedFlight="Flight"
                    TicketsList="Tickets"
                    TicketParam ="Ticket"
                    PassengersList="PassengerList"
                    FlightClasses="FlightClasses">
    </PassengerDialog>

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

@code {

    [Parameter] public Flight? SelectedFlight { get; set; } = new();

    public Flight Flight { get; set; } = new();
    public Ticket Ticket { get; set; } = new();
    public List<Ticket> Tickets { get; set; } = new();
    public List<FlightClass> FlightClasses { get; set; } = [];
    public List<Passenger> PassengerList { get; set; } = [];


    PassengerDialog? passengerDialog; //Dialog Form
    public string Title { get; set; } = "Adicionar";


    protected async override Task OnInitializedAsync()
    {
        await GetPassengers();
        await GetFlightClasses();
        allState.Action += StateHasChanged;
    }

    //Open new class form dialog
    void OpenDialog()
    {
        passengerDialog?.OpenDialog();
    }

    //Get Classes from selected flight
    private async Task GetPassengers()
    {

        if (SelectedFlight is not null)
            Flight = SelectedFlight!;
        var list = await ticketService.GetAll(Constants.TicketBaseUrl);
        Tickets = list.Where(c => c.FlightId == Flight.Id).ToList();
        PassengerList = await passengerService.GetAll(Constants.PassengerBaseUrl);
    }

    private async Task GetFlightClasses()
    {
        var list = await flightClassService.GetAll(Constants.FlightClassBaseUrl);
        FlightClasses = list.Where(c => c.FlightId == Flight.Id).ToList();
    }

    private void GoBack()
    {
        Tickets = [];
        FlightClasses = [];
        SelectedFlight = new();
        StateHasChanged();
        Dispose();
        allState.FlightClicked();
    }

    protected async override void OnParametersSet()
    {
        base.OnParametersSet();
        await GetPassengers();
        await GetFlightClasses();
        allState.Action += StateHasChanged;
    }



    // Add or Update
    private async Task HandleSaveTicketOperationEvent(Ticket ticket)
    {
        bool successCheck = false;
        if (ticket.Id > 0)
        {
            var result = await ticketService.Update(ticket, Constants.TicketBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await ticketService.Insert(ticket, Constants.TicketBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            await GetPassengers();
            passengerDialog?.ChangeTitle("Adicionar");
        }
    }

    private async Task HandleSavePassengerOperationEvent(Passenger passenger)
    {
        bool successCheck = false;
        if (passenger.Id > 0)
        {
            var result = await passengerService.Update(passenger, Constants.PassengerBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await passengerService.Insert(passenger, Constants.PassengerBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            await GetPassengers();
            passengerDialog?.ChangeTitle("Adicionar");
        }

    }

    // Edit
    private void EditClicked(Ticket ticket)
    {
        passengerDialog?.ChangeTitle("Atualizar");
        Ticket = ticket;
        OpenDialog();
    }

    // Delete
    private async void DeleteClicked(Ticket ticket)
    {
        bool confirm = await DialogService.ConfirmAsync($"Tem certeza que deseja deletar o passageiro {ticket.Passenger?.Name} deste vôo?", "Confirmação");
        if (!confirm) return;

        var response = await ticketService.DeleteById(ticket.Id, Constants.TicketBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message)){
            await GetPassengers();
            await GetFlightClasses();
        }

    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Sucesso");
            return true;
        }
        else
        {
            await DialogService.AlertAsync(message, "Atenção!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }


}
