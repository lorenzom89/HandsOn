@using BaseLibrary.Responses
@implements IDisposable
@if (allState.ShowUser)
{
     <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Gerenciar Usuários</h4>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Nome</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">Função</th>
                                        <th scope="col">Opções</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (ManageUsers is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in ManageUsers)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <th>@item.UserId</th>
                                                <th>@item.Name</th>
                                                <th>@item.Email</th>
                                                <th>@item.Role</th>
                                                <th>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </th>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="7"><div class="alert alert-info text-center">Nenhum usuário cadastrado ainda</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle{
        cursor:pointer;
    }
</style>

<UserDialog @ref="userDialog"
    ManageUser="ManageUser"
    SystemRoles="SystemRoles"
    HandleSaveOperationEvent="HandleSaveOperationEvent">

</UserDialog>

@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();
    }
    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    void OpenDialog()
    {
        userDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUser(manageUser);
        bool succesCheck = await DisplayMessage(result.Flag, result.Message);
        if (succesCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }

    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog();
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await DialogService.ConfirmAsync($"Tem certeza que deseja deletar o usuário {user.Name}", "Confirmar");
        if (!confirm) return;
        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Sucesso");
            return true;
        }
        else
        {
            await DialogService.AlertAsync(message, "Atenção!");
            return false;
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

}
