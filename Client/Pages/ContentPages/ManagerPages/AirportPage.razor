@implements IDisposable

@if (allState.ShowAirport)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Aeroportos</h4>
                        <button class="btn btn-outline-success float-end" @onclick="OpenDialog"><i class="bi bi-plus-circle-dotted"></i>Adicionar Aeroporto</button>
                    </div>
                    <div class="card-header" style="max-height:580px; overflow-x:hidden; overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">Id</th>
                                        <th scope="col">Código IATA</th>
                                        <th scope="col">Cidade</th>
                                        <th scope="col">Opções</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Airports is not null)
                                    {
                                        int count = 1;
                                        foreach (var item in Airports)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <th>@item.Id</th>
                                                <th>@item.CodIATA</th>
                                                <th>@item.City!.Name</th>
                                                <th>
                                                    <i class="bi bi-pencil text-info cursorStyle" @onclick="()=>EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger cursorStyle" @onclick="()=>DeleteClicked(item)"></i>
                                                </th>
                                            </tr>
                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="4"><div class="alert alert-info text-center">Nenhum aeroporto cadastrado ainda</div></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<AirportDialog @ref="airportDialog"
               HandleSaveOperationEvent="HandleSaveOperationEvent"
               Airport="Airport"
               Cities="Cities">
</AirportDialog>

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

@code {

    AirportDialog? airportDialog;
    Airport Airport = new();
    public string Title { get; set; } = "Adicionar";
    public List<Airport> Airports { get; set; } = new();
    public List<City> Cities { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetAirports();
        await GetCities();
        allState.Action += StateHasChanged;
    }

    void OpenDialog()
    {
        airportDialog?.OpenDialog();
    }

    private async Task GetAirports()
    {
        Airports = await airportService.GetAll(Constants.AirportBaseUrl);
    }
    private async Task GetCities()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }
    // Add or Update
    private async Task HandleSaveOperationEvent(Airport airport)
    {
        bool successCheck = false;
        if (airport.Id > 0)
        {
            var result = await airportService.Update(airport, Constants.AirportBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var result = await airportService.Insert(airport, Constants.AirportBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        if (successCheck)
        {
            Airport = new();
            await GetAirports();
            await GetCities();
            airportDialog?.ChangeTitle("Adicionar");
        }
    }

    // Edit
    private void EditClicked(Airport airport)
    {
        airportDialog?.ChangeTitle("Atualizar");
        Airport = airport;
        OpenDialog();
    }

    // Delete
    private async void DeleteClicked(Airport airport)
    {
        bool confirm = await DialogService.ConfirmAsync($"Tem certeza que deseja deletar o aeroporto com código IATA {airport.CodIATA}?", "Confirmação");
        if (!confirm) return;

        var response = await airportService.DeleteById(airport.Id, Constants.AirportBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetAirports();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Sucesso");
            return true;
        }
        else
        {
            await DialogService.AlertAsync(message, "Atenção!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}